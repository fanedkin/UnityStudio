// automatically generated by the FlatBuffers compiler, do not modify

namespace Flat
{

using System;
using FlatBuffers;

public struct Flat_Vector3 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Flat_Vector3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }

  public static Offset<Flat_Vector3> CreateFlat_Vector3(FlatBufferBuilder builder, float X, float Y, float Z) {
    builder.Prep(4, 12);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<Flat_Vector3>(builder.Offset);
  }
};

public struct Flat_Vector2 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Flat_Vector2 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }

  public static Offset<Flat_Vector2> CreateFlat_Vector2(FlatBufferBuilder builder, float X, float Y) {
    builder.Prep(4, 8);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<Flat_Vector2>(builder.Offset);
  }
};

public struct Flat_Quaternion : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Flat_Quaternion __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }
  public float W { get { return __p.bb.GetFloat(__p.bb_pos + 12); } }

  public static Offset<Flat_Quaternion> CreateFlat_Quaternion(FlatBufferBuilder builder, float X, float Y, float Z, float W) {
    builder.Prep(4, 16);
    builder.PutFloat(W);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<Flat_Quaternion>(builder.Offset);
  }
};

public struct ConnectPlayer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ConnectPlayer GetRootAsConnectPlayer(ByteBuffer _bb) { return GetRootAsConnectPlayer(_bb, new ConnectPlayer()); }
  public static ConnectPlayer GetRootAsConnectPlayer(ByteBuffer _bb, ConnectPlayer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ConnectPlayer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string MechineName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetMechineNameBytes() { return __p.__vector_as_arraysegment(6); }
  public string Mechineid { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetMechineidBytes() { return __p.__vector_as_arraysegment(8); }
  public int WeaponType { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PlayerStyle { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GroupId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool JoinState { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<ConnectPlayer> CreateConnectPlayer(FlatBufferBuilder builder,
      int id = 0,
      StringOffset mechineNameOffset = default(StringOffset),
      StringOffset mechineidOffset = default(StringOffset),
      int weaponType = 0,
      int playerStyle = 0,
      int GroupId = 0,
      bool joinState = false) {
    builder.StartObject(7);
    ConnectPlayer.AddGroupId(builder, GroupId);
    ConnectPlayer.AddPlayerStyle(builder, playerStyle);
    ConnectPlayer.AddWeaponType(builder, weaponType);
    ConnectPlayer.AddMechineid(builder, mechineidOffset);
    ConnectPlayer.AddMechineName(builder, mechineNameOffset);
    ConnectPlayer.AddId(builder, id);
    ConnectPlayer.AddJoinState(builder, joinState);
    return ConnectPlayer.EndConnectPlayer(builder);
  }

  public static void StartConnectPlayer(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddMechineName(FlatBufferBuilder builder, StringOffset mechineNameOffset) { builder.AddOffset(1, mechineNameOffset.Value, 0); }
  public static void AddMechineid(FlatBufferBuilder builder, StringOffset mechineidOffset) { builder.AddOffset(2, mechineidOffset.Value, 0); }
  public static void AddWeaponType(FlatBufferBuilder builder, int weaponType) { builder.AddInt(3, weaponType, 0); }
  public static void AddPlayerStyle(FlatBufferBuilder builder, int playerStyle) { builder.AddInt(4, playerStyle, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, int GroupId) { builder.AddInt(5, GroupId, 0); }
  public static void AddJoinState(FlatBufferBuilder builder, bool joinState) { builder.AddBool(6, joinState, false); }
  public static Offset<ConnectPlayer> EndConnectPlayer(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ConnectPlayer>(o);
  }
};

public struct C2SConnectToHost : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static C2SConnectToHost GetRootAsC2SConnectToHost(ByteBuffer _bb) { return GetRootAsC2SConnectToHost(_bb, new C2SConnectToHost()); }
  public static C2SConnectToHost GetRootAsC2SConnectToHost(ByteBuffer _bb, C2SConnectToHost obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public C2SConnectToHost __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string MachineName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetMachineNameBytes() { return __p.__vector_as_arraysegment(4); }
  public string MachineId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetMachineIdBytes() { return __p.__vector_as_arraysegment(6); }

  public static Offset<C2SConnectToHost> CreateC2SConnectToHost(FlatBufferBuilder builder,
      StringOffset machineNameOffset = default(StringOffset),
      StringOffset machineIdOffset = default(StringOffset)) {
    builder.StartObject(2);
    C2SConnectToHost.AddMachineId(builder, machineIdOffset);
    C2SConnectToHost.AddMachineName(builder, machineNameOffset);
    return C2SConnectToHost.EndC2SConnectToHost(builder);
  }

  public static void StartC2SConnectToHost(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddMachineName(FlatBufferBuilder builder, StringOffset machineNameOffset) { builder.AddOffset(0, machineNameOffset.Value, 0); }
  public static void AddMachineId(FlatBufferBuilder builder, StringOffset machineIdOffset) { builder.AddOffset(1, machineIdOffset.Value, 0); }
  public static Offset<C2SConnectToHost> EndC2SConnectToHost(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<C2SConnectToHost>(o);
  }
};

public struct S2CConnectToHost : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2CConnectToHost GetRootAsS2CConnectToHost(ByteBuffer _bb) { return GetRootAsS2CConnectToHost(_bb, new S2CConnectToHost()); }
  public static S2CConnectToHost GetRootAsS2CConnectToHost(ByteBuffer _bb, S2CConnectToHost obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2CConnectToHost __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Issucceed { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }
  public int PlayerId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public ConnectPlayer? PlayerList(int j) { int o = __p.__offset(8); return o != 0 ? (ConnectPlayer?)(new ConnectPlayer()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PlayerListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<S2CConnectToHost> CreateS2CConnectToHost(FlatBufferBuilder builder,
      bool issucceed = true,
      int playerId = 0,
      VectorOffset playerListOffset = default(VectorOffset)) {
    builder.StartObject(3);
    S2CConnectToHost.AddPlayerList(builder, playerListOffset);
    S2CConnectToHost.AddPlayerId(builder, playerId);
    S2CConnectToHost.AddIssucceed(builder, issucceed);
    return S2CConnectToHost.EndS2CConnectToHost(builder);
  }

  public static void StartS2CConnectToHost(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddIssucceed(FlatBufferBuilder builder, bool issucceed) { builder.AddBool(0, issucceed, true); }
  public static void AddPlayerId(FlatBufferBuilder builder, int playerId) { builder.AddInt(1, playerId, 0); }
  public static void AddPlayerList(FlatBufferBuilder builder, VectorOffset playerListOffset) { builder.AddOffset(2, playerListOffset.Value, 0); }
  public static VectorOffset CreatePlayerListVector(FlatBufferBuilder builder, Offset<ConnectPlayer>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartPlayerListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<S2CConnectToHost> EndS2CConnectToHost(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2CConnectToHost>(o);
  }
};

public struct S2CPlayerEnterNotify : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2CPlayerEnterNotify GetRootAsS2CPlayerEnterNotify(ByteBuffer _bb) { return GetRootAsS2CPlayerEnterNotify(_bb, new S2CPlayerEnterNotify()); }
  public static S2CPlayerEnterNotify GetRootAsS2CPlayerEnterNotify(ByteBuffer _bb, S2CPlayerEnterNotify obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2CPlayerEnterNotify __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ConnectPlayer? Player { get { int o = __p.__offset(4); return o != 0 ? (ConnectPlayer?)(new ConnectPlayer()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<S2CPlayerEnterNotify> CreateS2CPlayerEnterNotify(FlatBufferBuilder builder,
      Offset<ConnectPlayer> playerOffset = default(Offset<ConnectPlayer>)) {
    builder.StartObject(1);
    S2CPlayerEnterNotify.AddPlayer(builder, playerOffset);
    return S2CPlayerEnterNotify.EndS2CPlayerEnterNotify(builder);
  }

  public static void StartS2CPlayerEnterNotify(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddPlayer(FlatBufferBuilder builder, Offset<ConnectPlayer> playerOffset) { builder.AddOffset(0, playerOffset.Value, 0); }
  public static Offset<S2CPlayerEnterNotify> EndS2CPlayerEnterNotify(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2CPlayerEnterNotify>(o);
  }
};

public struct C2SDisConnectToHost : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static C2SDisConnectToHost GetRootAsC2SDisConnectToHost(ByteBuffer _bb) { return GetRootAsC2SDisConnectToHost(_bb, new C2SDisConnectToHost()); }
  public static C2SDisConnectToHost GetRootAsC2SDisConnectToHost(ByteBuffer _bb, C2SDisConnectToHost obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public C2SDisConnectToHost __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartC2SDisConnectToHost(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<C2SDisConnectToHost> EndC2SDisConnectToHost(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<C2SDisConnectToHost>(o);
  }
};

public struct S2CDisConnectToHost : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2CDisConnectToHost GetRootAsS2CDisConnectToHost(ByteBuffer _bb) { return GetRootAsS2CDisConnectToHost(_bb, new S2CDisConnectToHost()); }
  public static S2CDisConnectToHost GetRootAsS2CDisConnectToHost(ByteBuffer _bb, S2CDisConnectToHost obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2CDisConnectToHost __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Issucceed { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<S2CDisConnectToHost> CreateS2CDisConnectToHost(FlatBufferBuilder builder,
      bool issucceed = false) {
    builder.StartObject(1);
    S2CDisConnectToHost.AddIssucceed(builder, issucceed);
    return S2CDisConnectToHost.EndS2CDisConnectToHost(builder);
  }

  public static void StartS2CDisConnectToHost(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddIssucceed(FlatBufferBuilder builder, bool issucceed) { builder.AddBool(0, issucceed, false); }
  public static Offset<S2CDisConnectToHost> EndS2CDisConnectToHost(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2CDisConnectToHost>(o);
  }
};

public struct S2CPlayerQuitNotify : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2CPlayerQuitNotify GetRootAsS2CPlayerQuitNotify(ByteBuffer _bb) { return GetRootAsS2CPlayerQuitNotify(_bb, new S2CPlayerQuitNotify()); }
  public static S2CPlayerQuitNotify GetRootAsS2CPlayerQuitNotify(ByteBuffer _bb, S2CPlayerQuitNotify obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2CPlayerQuitNotify __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int DisConnectPlayerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<S2CPlayerQuitNotify> CreateS2CPlayerQuitNotify(FlatBufferBuilder builder,
      int disConnectPlayerId = 0) {
    builder.StartObject(1);
    S2CPlayerQuitNotify.AddDisConnectPlayerId(builder, disConnectPlayerId);
    return S2CPlayerQuitNotify.EndS2CPlayerQuitNotify(builder);
  }

  public static void StartS2CPlayerQuitNotify(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddDisConnectPlayerId(FlatBufferBuilder builder, int disConnectPlayerId) { builder.AddInt(0, disConnectPlayerId, 0); }
  public static Offset<S2CPlayerQuitNotify> EndS2CPlayerQuitNotify(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2CPlayerQuitNotify>(o);
  }
};

public struct C2SSyncPlayerGlobalInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static C2SSyncPlayerGlobalInfo GetRootAsC2SSyncPlayerGlobalInfo(ByteBuffer _bb) { return GetRootAsC2SSyncPlayerGlobalInfo(_bb, new C2SSyncPlayerGlobalInfo()); }
  public static C2SSyncPlayerGlobalInfo GetRootAsC2SSyncPlayerGlobalInfo(ByteBuffer _bb, C2SSyncPlayerGlobalInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public C2SSyncPlayerGlobalInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Flat_Vector3? PlayerPos { get { int o = __p.__offset(4); return o != 0 ? (Flat_Vector3?)(new Flat_Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Flat_Quaternion? PlayerRotate { get { int o = __p.__offset(6); return o != 0 ? (Flat_Quaternion?)(new Flat_Quaternion()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Flat_Vector3? GunPos { get { int o = __p.__offset(8); return o != 0 ? (Flat_Vector3?)(new Flat_Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Flat_Quaternion? GunRotate { get { int o = __p.__offset(10); return o != 0 ? (Flat_Quaternion?)(new Flat_Quaternion()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Flat_Vector3? GunForward { get { int o = __p.__offset(12); return o != 0 ? (Flat_Vector3?)(new Flat_Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Flat_Vector3? VRHeadPos { get { int o = __p.__offset(14); return o != 0 ? (Flat_Vector3?)(new Flat_Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Flat_Quaternion? VRHeadRotate { get { int o = __p.__offset(16); return o != 0 ? (Flat_Quaternion?)(new Flat_Quaternion()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartC2SSyncPlayerGlobalInfo(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddPlayerPos(FlatBufferBuilder builder, Offset<Flat_Vector3> playerPosOffset) { builder.AddStruct(0, playerPosOffset.Value, 0); }
  public static void AddPlayerRotate(FlatBufferBuilder builder, Offset<Flat_Quaternion> playerRotateOffset) { builder.AddStruct(1, playerRotateOffset.Value, 0); }
  public static void AddGunPos(FlatBufferBuilder builder, Offset<Flat_Vector3> GunPosOffset) { builder.AddStruct(2, GunPosOffset.Value, 0); }
  public static void AddGunRotate(FlatBufferBuilder builder, Offset<Flat_Quaternion> GunRotateOffset) { builder.AddStruct(3, GunRotateOffset.Value, 0); }
  public static void AddGunForward(FlatBufferBuilder builder, Offset<Flat_Vector3> GunForwardOffset) { builder.AddStruct(4, GunForwardOffset.Value, 0); }
  public static void AddVRHeadPos(FlatBufferBuilder builder, Offset<Flat_Vector3> VRHeadPosOffset) { builder.AddStruct(5, VRHeadPosOffset.Value, 0); }
  public static void AddVRHeadRotate(FlatBufferBuilder builder, Offset<Flat_Quaternion> VRHeadRotateOffset) { builder.AddStruct(6, VRHeadRotateOffset.Value, 0); }
  public static Offset<C2SSyncPlayerGlobalInfo> EndC2SSyncPlayerGlobalInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<C2SSyncPlayerGlobalInfo>(o);
  }
};

public struct S2CSyncPlayerGlobalInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2CSyncPlayerGlobalInfo GetRootAsS2CSyncPlayerGlobalInfo(ByteBuffer _bb) { return GetRootAsS2CSyncPlayerGlobalInfo(_bb, new S2CSyncPlayerGlobalInfo()); }
  public static S2CSyncPlayerGlobalInfo GetRootAsS2CSyncPlayerGlobalInfo(ByteBuffer _bb, S2CSyncPlayerGlobalInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2CSyncPlayerGlobalInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ObjId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Flat_Vector3? PlayerPos { get { int o = __p.__offset(6); return o != 0 ? (Flat_Vector3?)(new Flat_Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Flat_Quaternion? PlayerRotate { get { int o = __p.__offset(8); return o != 0 ? (Flat_Quaternion?)(new Flat_Quaternion()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Flat_Vector3? GunPos { get { int o = __p.__offset(10); return o != 0 ? (Flat_Vector3?)(new Flat_Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Flat_Quaternion? GunRotate { get { int o = __p.__offset(12); return o != 0 ? (Flat_Quaternion?)(new Flat_Quaternion()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Flat_Vector3? GunForward { get { int o = __p.__offset(14); return o != 0 ? (Flat_Vector3?)(new Flat_Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Flat_Vector3? VRHeadPos { get { int o = __p.__offset(16); return o != 0 ? (Flat_Vector3?)(new Flat_Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Flat_Quaternion? VRHeadRotate { get { int o = __p.__offset(18); return o != 0 ? (Flat_Quaternion?)(new Flat_Quaternion()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartS2CSyncPlayerGlobalInfo(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddObjId(FlatBufferBuilder builder, int objId) { builder.AddInt(0, objId, 0); }
  public static void AddPlayerPos(FlatBufferBuilder builder, Offset<Flat_Vector3> playerPosOffset) { builder.AddStruct(1, playerPosOffset.Value, 0); }
  public static void AddPlayerRotate(FlatBufferBuilder builder, Offset<Flat_Quaternion> playerRotateOffset) { builder.AddStruct(2, playerRotateOffset.Value, 0); }
  public static void AddGunPos(FlatBufferBuilder builder, Offset<Flat_Vector3> GunPosOffset) { builder.AddStruct(3, GunPosOffset.Value, 0); }
  public static void AddGunRotate(FlatBufferBuilder builder, Offset<Flat_Quaternion> GunRotateOffset) { builder.AddStruct(4, GunRotateOffset.Value, 0); }
  public static void AddGunForward(FlatBufferBuilder builder, Offset<Flat_Vector3> GunForwardOffset) { builder.AddStruct(5, GunForwardOffset.Value, 0); }
  public static void AddVRHeadPos(FlatBufferBuilder builder, Offset<Flat_Vector3> VRHeadPosOffset) { builder.AddStruct(6, VRHeadPosOffset.Value, 0); }
  public static void AddVRHeadRotate(FlatBufferBuilder builder, Offset<Flat_Quaternion> VRHeadRotateOffset) { builder.AddStruct(7, VRHeadRotateOffset.Value, 0); }
  public static Offset<S2CSyncPlayerGlobalInfo> EndS2CSyncPlayerGlobalInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2CSyncPlayerGlobalInfo>(o);
  }
};

public struct S2CReloadMagazineNotify : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2CReloadMagazineNotify GetRootAsS2CReloadMagazineNotify(ByteBuffer _bb) { return GetRootAsS2CReloadMagazineNotify(_bb, new S2CReloadMagazineNotify()); }
  public static S2CReloadMagazineNotify GetRootAsS2CReloadMagazineNotify(ByteBuffer _bb, S2CReloadMagazineNotify obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2CReloadMagazineNotify __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PlayerObjId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<S2CReloadMagazineNotify> CreateS2CReloadMagazineNotify(FlatBufferBuilder builder,
      int playerObjId = 0) {
    builder.StartObject(1);
    S2CReloadMagazineNotify.AddPlayerObjId(builder, playerObjId);
    return S2CReloadMagazineNotify.EndS2CReloadMagazineNotify(builder);
  }

  public static void StartS2CReloadMagazineNotify(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddPlayerObjId(FlatBufferBuilder builder, int playerObjId) { builder.AddInt(0, playerObjId, 0); }
  public static Offset<S2CReloadMagazineNotify> EndS2CReloadMagazineNotify(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2CReloadMagazineNotify>(o);
  }
};

public struct C2SFireBulletCreate : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static C2SFireBulletCreate GetRootAsC2SFireBulletCreate(ByteBuffer _bb) { return GetRootAsC2SFireBulletCreate(_bb, new C2SFireBulletCreate()); }
  public static C2SFireBulletCreate GetRootAsC2SFireBulletCreate(ByteBuffer _bb, C2SFireBulletCreate obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public C2SFireBulletCreate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ObjId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Flat_Vector3? Pos { get { int o = __p.__offset(6); return o != 0 ? (Flat_Vector3?)(new Flat_Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Flat_Quaternion? Rotate { get { int o = __p.__offset(8); return o != 0 ? (Flat_Quaternion?)(new Flat_Quaternion()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartC2SFireBulletCreate(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddObjId(FlatBufferBuilder builder, int objId) { builder.AddInt(0, objId, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<Flat_Vector3> posOffset) { builder.AddStruct(1, posOffset.Value, 0); }
  public static void AddRotate(FlatBufferBuilder builder, Offset<Flat_Quaternion> rotateOffset) { builder.AddStruct(2, rotateOffset.Value, 0); }
  public static Offset<C2SFireBulletCreate> EndC2SFireBulletCreate(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<C2SFireBulletCreate>(o);
  }
};

public struct S2CFireBulletCreate : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2CFireBulletCreate GetRootAsS2CFireBulletCreate(ByteBuffer _bb) { return GetRootAsS2CFireBulletCreate(_bb, new S2CFireBulletCreate()); }
  public static S2CFireBulletCreate GetRootAsS2CFireBulletCreate(ByteBuffer _bb, S2CFireBulletCreate obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2CFireBulletCreate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ObjId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Flat_Vector3? Pos { get { int o = __p.__offset(6); return o != 0 ? (Flat_Vector3?)(new Flat_Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Flat_Quaternion? Rotate { get { int o = __p.__offset(8); return o != 0 ? (Flat_Quaternion?)(new Flat_Quaternion()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartS2CFireBulletCreate(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddObjId(FlatBufferBuilder builder, int objId) { builder.AddInt(0, objId, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<Flat_Vector3> posOffset) { builder.AddStruct(1, posOffset.Value, 0); }
  public static void AddRotate(FlatBufferBuilder builder, Offset<Flat_Quaternion> rotateOffset) { builder.AddStruct(2, rotateOffset.Value, 0); }
  public static Offset<S2CFireBulletCreate> EndS2CFireBulletCreate(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2CFireBulletCreate>(o);
  }
};

public struct NpcSpawnInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static NpcSpawnInfo GetRootAsNpcSpawnInfo(ByteBuffer _bb) { return GetRootAsNpcSpawnInfo(_bb, new NpcSpawnInfo()); }
  public static NpcSpawnInfo GetRootAsNpcSpawnInfo(ByteBuffer _bb, NpcSpawnInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public NpcSpawnInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ObjId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NpcId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SpawnPointId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GroupId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<NpcSpawnInfo> CreateNpcSpawnInfo(FlatBufferBuilder builder,
      int objId = 0,
      int npcId = 0,
      int spawnPointId = 0,
      int groupId = 0) {
    builder.StartObject(4);
    NpcSpawnInfo.AddGroupId(builder, groupId);
    NpcSpawnInfo.AddSpawnPointId(builder, spawnPointId);
    NpcSpawnInfo.AddNpcId(builder, npcId);
    NpcSpawnInfo.AddObjId(builder, objId);
    return NpcSpawnInfo.EndNpcSpawnInfo(builder);
  }

  public static void StartNpcSpawnInfo(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddObjId(FlatBufferBuilder builder, int objId) { builder.AddInt(0, objId, 0); }
  public static void AddNpcId(FlatBufferBuilder builder, int npcId) { builder.AddInt(1, npcId, 0); }
  public static void AddSpawnPointId(FlatBufferBuilder builder, int spawnPointId) { builder.AddInt(2, spawnPointId, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, int groupId) { builder.AddInt(3, groupId, 0); }
  public static Offset<NpcSpawnInfo> EndNpcSpawnInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<NpcSpawnInfo>(o);
  }
};

public struct S2CNpcCreateNotify : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2CNpcCreateNotify GetRootAsS2CNpcCreateNotify(ByteBuffer _bb) { return GetRootAsS2CNpcCreateNotify(_bb, new S2CNpcCreateNotify()); }
  public static S2CNpcCreateNotify GetRootAsS2CNpcCreateNotify(ByteBuffer _bb, S2CNpcCreateNotify obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2CNpcCreateNotify __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public NpcSpawnInfo? NpcList(int j) { int o = __p.__offset(4); return o != 0 ? (NpcSpawnInfo?)(new NpcSpawnInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int NpcListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<S2CNpcCreateNotify> CreateS2CNpcCreateNotify(FlatBufferBuilder builder,
      VectorOffset npcListOffset = default(VectorOffset)) {
    builder.StartObject(1);
    S2CNpcCreateNotify.AddNpcList(builder, npcListOffset);
    return S2CNpcCreateNotify.EndS2CNpcCreateNotify(builder);
  }

  public static void StartS2CNpcCreateNotify(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddNpcList(FlatBufferBuilder builder, VectorOffset npcListOffset) { builder.AddOffset(0, npcListOffset.Value, 0); }
  public static VectorOffset CreateNpcListVector(FlatBufferBuilder builder, Offset<NpcSpawnInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartNpcListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<S2CNpcCreateNotify> EndS2CNpcCreateNotify(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2CNpcCreateNotify>(o);
  }
};

public struct MonsterSpawnInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static MonsterSpawnInfo GetRootAsMonsterSpawnInfo(ByteBuffer _bb) { return GetRootAsMonsterSpawnInfo(_bb, new MonsterSpawnInfo()); }
  public static MonsterSpawnInfo GetRootAsMonsterSpawnInfo(ByteBuffer _bb, MonsterSpawnInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public MonsterSpawnInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DatabaseId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SpawnPoint { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Flat_Vector3? SpawnPos { get { int o = __p.__offset(10); return o != 0 ? (Flat_Vector3?)(new Flat_Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Flat_Quaternion? SpawnRot { get { int o = __p.__offset(12); return o != 0 ? (Flat_Quaternion?)(new Flat_Quaternion()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartMonsterSpawnInfo(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddDatabaseId(FlatBufferBuilder builder, int databaseId) { builder.AddInt(1, databaseId, 0); }
  public static void AddSpawnPoint(FlatBufferBuilder builder, int spawnPoint) { builder.AddInt(2, spawnPoint, 0); }
  public static void AddSpawnPos(FlatBufferBuilder builder, Offset<Flat_Vector3> spawnPosOffset) { builder.AddStruct(3, spawnPosOffset.Value, 0); }
  public static void AddSpawnRot(FlatBufferBuilder builder, Offset<Flat_Quaternion> spawnRotOffset) { builder.AddStruct(4, spawnRotOffset.Value, 0); }
  public static Offset<MonsterSpawnInfo> EndMonsterSpawnInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MonsterSpawnInfo>(o);
  }
};

public struct S2CMonsterCreateNotify : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2CMonsterCreateNotify GetRootAsS2CMonsterCreateNotify(ByteBuffer _bb) { return GetRootAsS2CMonsterCreateNotify(_bb, new S2CMonsterCreateNotify()); }
  public static S2CMonsterCreateNotify GetRootAsS2CMonsterCreateNotify(ByteBuffer _bb, S2CMonsterCreateNotify obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2CMonsterCreateNotify __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MonsterSpawnInfo? MonsterList(int j) { int o = __p.__offset(4); return o != 0 ? (MonsterSpawnInfo?)(new MonsterSpawnInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MonsterListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<S2CMonsterCreateNotify> CreateS2CMonsterCreateNotify(FlatBufferBuilder builder,
      VectorOffset monsterListOffset = default(VectorOffset)) {
    builder.StartObject(1);
    S2CMonsterCreateNotify.AddMonsterList(builder, monsterListOffset);
    return S2CMonsterCreateNotify.EndS2CMonsterCreateNotify(builder);
  }

  public static void StartS2CMonsterCreateNotify(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddMonsterList(FlatBufferBuilder builder, VectorOffset monsterListOffset) { builder.AddOffset(0, monsterListOffset.Value, 0); }
  public static VectorOffset CreateMonsterListVector(FlatBufferBuilder builder, Offset<MonsterSpawnInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartMonsterListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<S2CMonsterCreateNotify> EndS2CMonsterCreateNotify(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2CMonsterCreateNotify>(o);
  }
};

public struct S2CMonsterAnimationSyncNotify : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2CMonsterAnimationSyncNotify GetRootAsS2CMonsterAnimationSyncNotify(ByteBuffer _bb) { return GetRootAsS2CMonsterAnimationSyncNotify(_bb, new S2CMonsterAnimationSyncNotify()); }
  public static S2CMonsterAnimationSyncNotify GetRootAsS2CMonsterAnimationSyncNotify(ByteBuffer _bb, S2CMonsterAnimationSyncNotify obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2CMonsterAnimationSyncNotify __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ObjId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string StateName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetStateNameBytes() { return __p.__vector_as_arraysegment(6); }
  public float TransitionDuration { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int LayerIndex { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<S2CMonsterAnimationSyncNotify> CreateS2CMonsterAnimationSyncNotify(FlatBufferBuilder builder,
      int objId = 0,
      StringOffset stateNameOffset = default(StringOffset),
      float transitionDuration = 0.0f,
      int layerIndex = 0) {
    builder.StartObject(4);
    S2CMonsterAnimationSyncNotify.AddLayerIndex(builder, layerIndex);
    S2CMonsterAnimationSyncNotify.AddTransitionDuration(builder, transitionDuration);
    S2CMonsterAnimationSyncNotify.AddStateName(builder, stateNameOffset);
    S2CMonsterAnimationSyncNotify.AddObjId(builder, objId);
    return S2CMonsterAnimationSyncNotify.EndS2CMonsterAnimationSyncNotify(builder);
  }

  public static void StartS2CMonsterAnimationSyncNotify(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddObjId(FlatBufferBuilder builder, int objId) { builder.AddInt(0, objId, 0); }
  public static void AddStateName(FlatBufferBuilder builder, StringOffset stateNameOffset) { builder.AddOffset(1, stateNameOffset.Value, 0); }
  public static void AddTransitionDuration(FlatBufferBuilder builder, float transitionDuration) { builder.AddFloat(2, transitionDuration, 0.0f); }
  public static void AddLayerIndex(FlatBufferBuilder builder, int layerIndex) { builder.AddInt(3, layerIndex, 0); }
  public static Offset<S2CMonsterAnimationSyncNotify> EndS2CMonsterAnimationSyncNotify(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2CMonsterAnimationSyncNotify>(o);
  }
};

public struct UnitTransform : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static UnitTransform GetRootAsUnitTransform(ByteBuffer _bb) { return GetRootAsUnitTransform(_bb, new UnitTransform()); }
  public static UnitTransform GetRootAsUnitTransform(ByteBuffer _bb, UnitTransform obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public UnitTransform __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ObjId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Flat_Vector3? Pos { get { int o = __p.__offset(6); return o != 0 ? (Flat_Vector3?)(new Flat_Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Flat_Quaternion? Rotate { get { int o = __p.__offset(8); return o != 0 ? (Flat_Quaternion?)(new Flat_Quaternion()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Flat_Quaternion? NpcBoneRot { get { int o = __p.__offset(10); return o != 0 ? (Flat_Quaternion?)(new Flat_Quaternion()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartUnitTransform(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddObjId(FlatBufferBuilder builder, int objId) { builder.AddInt(0, objId, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<Flat_Vector3> posOffset) { builder.AddStruct(1, posOffset.Value, 0); }
  public static void AddRotate(FlatBufferBuilder builder, Offset<Flat_Quaternion> rotateOffset) { builder.AddStruct(2, rotateOffset.Value, 0); }
  public static void AddNpcBoneRot(FlatBufferBuilder builder, Offset<Flat_Quaternion> npcBoneRotOffset) { builder.AddStruct(3, npcBoneRotOffset.Value, 0); }
  public static Offset<UnitTransform> EndUnitTransform(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<UnitTransform>(o);
  }
};

public struct S2CUnitInfoSyncNotify : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2CUnitInfoSyncNotify GetRootAsS2CUnitInfoSyncNotify(ByteBuffer _bb) { return GetRootAsS2CUnitInfoSyncNotify(_bb, new S2CUnitInfoSyncNotify()); }
  public static S2CUnitInfoSyncNotify GetRootAsS2CUnitInfoSyncNotify(ByteBuffer _bb, S2CUnitInfoSyncNotify obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2CUnitInfoSyncNotify __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public UnitTransform? UnitInfoList(int j) { int o = __p.__offset(4); return o != 0 ? (UnitTransform?)(new UnitTransform()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int UnitInfoListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<S2CUnitInfoSyncNotify> CreateS2CUnitInfoSyncNotify(FlatBufferBuilder builder,
      VectorOffset unitInfoListOffset = default(VectorOffset)) {
    builder.StartObject(1);
    S2CUnitInfoSyncNotify.AddUnitInfoList(builder, unitInfoListOffset);
    return S2CUnitInfoSyncNotify.EndS2CUnitInfoSyncNotify(builder);
  }

  public static void StartS2CUnitInfoSyncNotify(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddUnitInfoList(FlatBufferBuilder builder, VectorOffset unitInfoListOffset) { builder.AddOffset(0, unitInfoListOffset.Value, 0); }
  public static VectorOffset CreateUnitInfoListVector(FlatBufferBuilder builder, Offset<UnitTransform>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartUnitInfoListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<S2CUnitInfoSyncNotify> EndS2CUnitInfoSyncNotify(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2CUnitInfoSyncNotify>(o);
  }
};

public struct S2CHitDamage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2CHitDamage GetRootAsS2CHitDamage(ByteBuffer _bb) { return GetRootAsS2CHitDamage(_bb, new S2CHitDamage()); }
  public static S2CHitDamage GetRootAsS2CHitDamage(ByteBuffer _bb, S2CHitDamage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2CHitDamage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int AttackerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HurterId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HitStatus { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AtkType { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AtkEffectType { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CurHP { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Damage { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HealValue { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HitForce { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Flat_Vector3? HitDir { get { int o = __p.__offset(22); return o != 0 ? (Flat_Vector3?)(new Flat_Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public int BodyPartId { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool HitHead { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static void StartS2CHitDamage(FlatBufferBuilder builder) { builder.StartObject(12); }
  public static void AddAttackerId(FlatBufferBuilder builder, int attackerId) { builder.AddInt(0, attackerId, 0); }
  public static void AddHurterId(FlatBufferBuilder builder, int hurterId) { builder.AddInt(1, hurterId, 0); }
  public static void AddHitStatus(FlatBufferBuilder builder, int hitStatus) { builder.AddInt(2, hitStatus, 0); }
  public static void AddAtkType(FlatBufferBuilder builder, int atkType) { builder.AddInt(3, atkType, 0); }
  public static void AddAtkEffectType(FlatBufferBuilder builder, int atkEffectType) { builder.AddInt(4, atkEffectType, 0); }
  public static void AddCurHP(FlatBufferBuilder builder, int curHP) { builder.AddInt(5, curHP, 0); }
  public static void AddDamage(FlatBufferBuilder builder, int damage) { builder.AddInt(6, damage, 0); }
  public static void AddHealValue(FlatBufferBuilder builder, int healValue) { builder.AddInt(7, healValue, 0); }
  public static void AddHitForce(FlatBufferBuilder builder, int hitForce) { builder.AddInt(8, hitForce, 0); }
  public static void AddHitDir(FlatBufferBuilder builder, Offset<Flat_Vector3> hitDirOffset) { builder.AddStruct(9, hitDirOffset.Value, 0); }
  public static void AddBodyPartId(FlatBufferBuilder builder, int bodyPartId) { builder.AddInt(10, bodyPartId, 0); }
  public static void AddHitHead(FlatBufferBuilder builder, bool hitHead) { builder.AddBool(11, hitHead, false); }
  public static Offset<S2CHitDamage> EndS2CHitDamage(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2CHitDamage>(o);
  }
};

public struct C2SHitDamage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static C2SHitDamage GetRootAsC2SHitDamage(ByteBuffer _bb) { return GetRootAsC2SHitDamage(_bb, new C2SHitDamage()); }
  public static C2SHitDamage GetRootAsC2SHitDamage(ByteBuffer _bb, C2SHitDamage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public C2SHitDamage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int AttackerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HurterId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HitStatus { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AtkType { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AtkEffectType { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CurHP { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Damage { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HealValue { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HitForce { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Flat_Vector3? HitDir { get { int o = __p.__offset(22); return o != 0 ? (Flat_Vector3?)(new Flat_Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public int BodyPartId { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool HitHead { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static void StartC2SHitDamage(FlatBufferBuilder builder) { builder.StartObject(12); }
  public static void AddAttackerId(FlatBufferBuilder builder, int attackerId) { builder.AddInt(0, attackerId, 0); }
  public static void AddHurterId(FlatBufferBuilder builder, int hurterId) { builder.AddInt(1, hurterId, 0); }
  public static void AddHitStatus(FlatBufferBuilder builder, int hitStatus) { builder.AddInt(2, hitStatus, 0); }
  public static void AddAtkType(FlatBufferBuilder builder, int atkType) { builder.AddInt(3, atkType, 0); }
  public static void AddAtkEffectType(FlatBufferBuilder builder, int atkEffectType) { builder.AddInt(4, atkEffectType, 0); }
  public static void AddCurHP(FlatBufferBuilder builder, int curHP) { builder.AddInt(5, curHP, 0); }
  public static void AddDamage(FlatBufferBuilder builder, int damage) { builder.AddInt(6, damage, 0); }
  public static void AddHealValue(FlatBufferBuilder builder, int healValue) { builder.AddInt(7, healValue, 0); }
  public static void AddHitForce(FlatBufferBuilder builder, int hitForce) { builder.AddInt(8, hitForce, 0); }
  public static void AddHitDir(FlatBufferBuilder builder, Offset<Flat_Vector3> hitDirOffset) { builder.AddStruct(9, hitDirOffset.Value, 0); }
  public static void AddBodyPartId(FlatBufferBuilder builder, int bodyPartId) { builder.AddInt(10, bodyPartId, 0); }
  public static void AddHitHead(FlatBufferBuilder builder, bool hitHead) { builder.AddBool(11, hitHead, false); }
  public static Offset<C2SHitDamage> EndC2SHitDamage(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<C2SHitDamage>(o);
  }
};

public struct C2SPlayerRevive : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static C2SPlayerRevive GetRootAsC2SPlayerRevive(ByteBuffer _bb) { return GetRootAsC2SPlayerRevive(_bb, new C2SPlayerRevive()); }
  public static C2SPlayerRevive GetRootAsC2SPlayerRevive(ByteBuffer _bb, C2SPlayerRevive obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public C2SPlayerRevive __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PlayerObjId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<C2SPlayerRevive> CreateC2SPlayerRevive(FlatBufferBuilder builder,
      int playerObjId = 0) {
    builder.StartObject(1);
    C2SPlayerRevive.AddPlayerObjId(builder, playerObjId);
    return C2SPlayerRevive.EndC2SPlayerRevive(builder);
  }

  public static void StartC2SPlayerRevive(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddPlayerObjId(FlatBufferBuilder builder, int playerObjId) { builder.AddInt(0, playerObjId, 0); }
  public static Offset<C2SPlayerRevive> EndC2SPlayerRevive(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<C2SPlayerRevive>(o);
  }
};

public struct S2CPlayerRevive : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2CPlayerRevive GetRootAsS2CPlayerRevive(ByteBuffer _bb) { return GetRootAsS2CPlayerRevive(_bb, new S2CPlayerRevive()); }
  public static S2CPlayerRevive GetRootAsS2CPlayerRevive(ByteBuffer _bb, S2CPlayerRevive obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2CPlayerRevive __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PlayerObjId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<S2CPlayerRevive> CreateS2CPlayerRevive(FlatBufferBuilder builder,
      int playerObjId = 0) {
    builder.StartObject(1);
    S2CPlayerRevive.AddPlayerObjId(builder, playerObjId);
    return S2CPlayerRevive.EndS2CPlayerRevive(builder);
  }

  public static void StartS2CPlayerRevive(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddPlayerObjId(FlatBufferBuilder builder, int playerObjId) { builder.AddInt(0, playerObjId, 0); }
  public static Offset<S2CPlayerRevive> EndS2CPlayerRevive(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2CPlayerRevive>(o);
  }
};

public struct S2CMonsterBulletCretateNotify : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2CMonsterBulletCretateNotify GetRootAsS2CMonsterBulletCretateNotify(ByteBuffer _bb) { return GetRootAsS2CMonsterBulletCretateNotify(_bb, new S2CMonsterBulletCretateNotify()); }
  public static S2CMonsterBulletCretateNotify GetRootAsS2CMonsterBulletCretateNotify(ByteBuffer _bb, S2CMonsterBulletCretateNotify obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2CMonsterBulletCretateNotify __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ObjId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TargetId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AssetId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Flat_Vector3? FirePos { get { int o = __p.__offset(10); return o != 0 ? (Flat_Vector3?)(new Flat_Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Flat_Quaternion? FireRot { get { int o = __p.__offset(12); return o != 0 ? (Flat_Quaternion?)(new Flat_Quaternion()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Flat_Vector3? TargetOffset { get { int o = __p.__offset(14); return o != 0 ? (Flat_Vector3?)(new Flat_Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public int RandomSeed { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static void StartS2CMonsterBulletCretateNotify(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddObjId(FlatBufferBuilder builder, int objId) { builder.AddInt(0, objId, 0); }
  public static void AddTargetId(FlatBufferBuilder builder, int targetId) { builder.AddInt(1, targetId, 0); }
  public static void AddAssetId(FlatBufferBuilder builder, int assetId) { builder.AddInt(2, assetId, 0); }
  public static void AddFirePos(FlatBufferBuilder builder, Offset<Flat_Vector3> firePosOffset) { builder.AddStruct(3, firePosOffset.Value, 0); }
  public static void AddFireRot(FlatBufferBuilder builder, Offset<Flat_Quaternion> fireRotOffset) { builder.AddStruct(4, fireRotOffset.Value, 0); }
  public static void AddTargetOffset(FlatBufferBuilder builder, Offset<Flat_Vector3> targetOffsetOffset) { builder.AddStruct(5, targetOffsetOffset.Value, 0); }
  public static void AddRandomSeed(FlatBufferBuilder builder, int randomSeed) { builder.AddInt(6, randomSeed, 0); }
  public static Offset<S2CMonsterBulletCretateNotify> EndS2CMonsterBulletCretateNotify(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2CMonsterBulletCretateNotify>(o);
  }
};

public struct S2CBattleStateSwitchNotify : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2CBattleStateSwitchNotify GetRootAsS2CBattleStateSwitchNotify(ByteBuffer _bb) { return GetRootAsS2CBattleStateSwitchNotify(_bb, new S2CBattleStateSwitchNotify()); }
  public static S2CBattleStateSwitchNotify GetRootAsS2CBattleStateSwitchNotify(ByteBuffer _bb, S2CBattleStateSwitchNotify obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2CBattleStateSwitchNotify __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int StateType { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string StateArg { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetStateArgBytes() { return __p.__vector_as_arraysegment(6); }

  public static Offset<S2CBattleStateSwitchNotify> CreateS2CBattleStateSwitchNotify(FlatBufferBuilder builder,
      int stateType = 0,
      StringOffset stateArgOffset = default(StringOffset)) {
    builder.StartObject(2);
    S2CBattleStateSwitchNotify.AddStateArg(builder, stateArgOffset);
    S2CBattleStateSwitchNotify.AddStateType(builder, stateType);
    return S2CBattleStateSwitchNotify.EndS2CBattleStateSwitchNotify(builder);
  }

  public static void StartS2CBattleStateSwitchNotify(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddStateType(FlatBufferBuilder builder, int stateType) { builder.AddInt(0, stateType, 0); }
  public static void AddStateArg(FlatBufferBuilder builder, StringOffset stateArgOffset) { builder.AddOffset(1, stateArgOffset.Value, 0); }
  public static Offset<S2CBattleStateSwitchNotify> EndS2CBattleStateSwitchNotify(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2CBattleStateSwitchNotify>(o);
  }
};

public struct S2CGameInfoNotify : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2CGameInfoNotify GetRootAsS2CGameInfoNotify(ByteBuffer _bb) { return GetRootAsS2CGameInfoNotify(_bb, new S2CGameInfoNotify()); }
  public static S2CGameInfoNotify GetRootAsS2CGameInfoNotify(ByteBuffer _bb, S2CGameInfoNotify obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2CGameInfoNotify __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int InfoPlayerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InfoType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string InfoValue { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetInfoValueBytes() { return __p.__vector_as_arraysegment(8); }

  public static Offset<S2CGameInfoNotify> CreateS2CGameInfoNotify(FlatBufferBuilder builder,
      int infoPlayerId = 0,
      int infoType = 0,
      StringOffset infoValueOffset = default(StringOffset)) {
    builder.StartObject(3);
    S2CGameInfoNotify.AddInfoValue(builder, infoValueOffset);
    S2CGameInfoNotify.AddInfoType(builder, infoType);
    S2CGameInfoNotify.AddInfoPlayerId(builder, infoPlayerId);
    return S2CGameInfoNotify.EndS2CGameInfoNotify(builder);
  }

  public static void StartS2CGameInfoNotify(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddInfoPlayerId(FlatBufferBuilder builder, int infoPlayerId) { builder.AddInt(0, infoPlayerId, 0); }
  public static void AddInfoType(FlatBufferBuilder builder, int infoType) { builder.AddInt(1, infoType, 0); }
  public static void AddInfoValue(FlatBufferBuilder builder, StringOffset infoValueOffset) { builder.AddOffset(2, infoValueOffset.Value, 0); }
  public static Offset<S2CGameInfoNotify> EndS2CGameInfoNotify(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2CGameInfoNotify>(o);
  }
};

public struct S2CGameLogicSwitchNotify : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2CGameLogicSwitchNotify GetRootAsS2CGameLogicSwitchNotify(ByteBuffer _bb) { return GetRootAsS2CGameLogicSwitchNotify(_bb, new S2CGameLogicSwitchNotify()); }
  public static S2CGameLogicSwitchNotify GetRootAsS2CGameLogicSwitchNotify(ByteBuffer _bb, S2CGameLogicSwitchNotify obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2CGameLogicSwitchNotify __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int GameLogicType { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<S2CGameLogicSwitchNotify> CreateS2CGameLogicSwitchNotify(FlatBufferBuilder builder,
      int gameLogicType = 0) {
    builder.StartObject(1);
    S2CGameLogicSwitchNotify.AddGameLogicType(builder, gameLogicType);
    return S2CGameLogicSwitchNotify.EndS2CGameLogicSwitchNotify(builder);
  }

  public static void StartS2CGameLogicSwitchNotify(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddGameLogicType(FlatBufferBuilder builder, int gameLogicType) { builder.AddInt(0, gameLogicType, 0); }
  public static Offset<S2CGameLogicSwitchNotify> EndS2CGameLogicSwitchNotify(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2CGameLogicSwitchNotify>(o);
  }
};

public struct S2CGameScoreNotify : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2CGameScoreNotify GetRootAsS2CGameScoreNotify(ByteBuffer _bb) { return GetRootAsS2CGameScoreNotify(_bb, new S2CGameScoreNotify()); }
  public static S2CGameScoreNotify GetRootAsS2CGameScoreNotify(ByteBuffer _bb, S2CGameScoreNotify obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2CGameScoreNotify __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int GroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Score { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<S2CGameScoreNotify> CreateS2CGameScoreNotify(FlatBufferBuilder builder,
      int groupId = 0,
      int score = 0) {
    builder.StartObject(2);
    S2CGameScoreNotify.AddScore(builder, score);
    S2CGameScoreNotify.AddGroupId(builder, groupId);
    return S2CGameScoreNotify.EndS2CGameScoreNotify(builder);
  }

  public static void StartS2CGameScoreNotify(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddGroupId(FlatBufferBuilder builder, int groupId) { builder.AddInt(0, groupId, 0); }
  public static void AddScore(FlatBufferBuilder builder, int score) { builder.AddInt(1, score, 0); }
  public static Offset<S2CGameScoreNotify> EndS2CGameScoreNotify(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2CGameScoreNotify>(o);
  }
};

public struct S2COccupyScoreNotify : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2COccupyScoreNotify GetRootAsS2COccupyScoreNotify(ByteBuffer _bb) { return GetRootAsS2COccupyScoreNotify(_bb, new S2COccupyScoreNotify()); }
  public static S2COccupyScoreNotify GetRootAsS2COccupyScoreNotify(ByteBuffer _bb, S2COccupyScoreNotify obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2COccupyScoreNotify __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int GroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<S2COccupyScoreNotify> CreateS2COccupyScoreNotify(FlatBufferBuilder builder,
      int groupId = 0) {
    builder.StartObject(1);
    S2COccupyScoreNotify.AddGroupId(builder, groupId);
    return S2COccupyScoreNotify.EndS2COccupyScoreNotify(builder);
  }

  public static void StartS2COccupyScoreNotify(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddGroupId(FlatBufferBuilder builder, int groupId) { builder.AddInt(0, groupId, 0); }
  public static Offset<S2COccupyScoreNotify> EndS2COccupyScoreNotify(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2COccupyScoreNotify>(o);
  }
};

public struct S2CCutScenesNotify : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2CCutScenesNotify GetRootAsS2CCutScenesNotify(ByteBuffer _bb) { return GetRootAsS2CCutScenesNotify(_bb, new S2CCutScenesNotify()); }
  public static S2CCutScenesNotify GetRootAsS2CCutScenesNotify(ByteBuffer _bb, S2CCutScenesNotify obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2CCutScenesNotify __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int CutScenesType { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public sbyte CutScenesStatus { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }

  public static Offset<S2CCutScenesNotify> CreateS2CCutScenesNotify(FlatBufferBuilder builder,
      int CutScenesType = 0,
      sbyte CutScenesStatus = 0) {
    builder.StartObject(2);
    S2CCutScenesNotify.AddCutScenesType(builder, CutScenesType);
    S2CCutScenesNotify.AddCutScenesStatus(builder, CutScenesStatus);
    return S2CCutScenesNotify.EndS2CCutScenesNotify(builder);
  }

  public static void StartS2CCutScenesNotify(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddCutScenesType(FlatBufferBuilder builder, int CutScenesType) { builder.AddInt(0, CutScenesType, 0); }
  public static void AddCutScenesStatus(FlatBufferBuilder builder, sbyte CutScenesStatus) { builder.AddSbyte(1, CutScenesStatus, 0); }
  public static Offset<S2CCutScenesNotify> EndS2CCutScenesNotify(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2CCutScenesNotify>(o);
  }
};

public struct S2CBattleStatisticalResults : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2CBattleStatisticalResults GetRootAsS2CBattleStatisticalResults(ByteBuffer _bb) { return GetRootAsS2CBattleStatisticalResults(_bb, new S2CBattleStatisticalResults()); }
  public static S2CBattleStatisticalResults GetRootAsS2CBattleStatisticalResults(ByteBuffer _bb, S2CBattleStatisticalResults obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2CBattleStatisticalResults __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Results { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetResultsBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<S2CBattleStatisticalResults> CreateS2CBattleStatisticalResults(FlatBufferBuilder builder,
      StringOffset resultsOffset = default(StringOffset)) {
    builder.StartObject(1);
    S2CBattleStatisticalResults.AddResults(builder, resultsOffset);
    return S2CBattleStatisticalResults.EndS2CBattleStatisticalResults(builder);
  }

  public static void StartS2CBattleStatisticalResults(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddResults(FlatBufferBuilder builder, StringOffset resultsOffset) { builder.AddOffset(0, resultsOffset.Value, 0); }
  public static Offset<S2CBattleStatisticalResults> EndS2CBattleStatisticalResults(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2CBattleStatisticalResults>(o);
  }
};

public struct S2CPlayAmbientEffectNotify : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2CPlayAmbientEffectNotify GetRootAsS2CPlayAmbientEffectNotify(ByteBuffer _bb) { return GetRootAsS2CPlayAmbientEffectNotify(_bb, new S2CPlayAmbientEffectNotify()); }
  public static S2CPlayAmbientEffectNotify GetRootAsS2CPlayAmbientEffectNotify(ByteBuffer _bb, S2CPlayAmbientEffectNotify obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2CPlayAmbientEffectNotify __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int EventId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string PointName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetPointNameBytes() { return __p.__vector_as_arraysegment(6); }

  public static Offset<S2CPlayAmbientEffectNotify> CreateS2CPlayAmbientEffectNotify(FlatBufferBuilder builder,
      int eventId = 0,
      StringOffset pointNameOffset = default(StringOffset)) {
    builder.StartObject(2);
    S2CPlayAmbientEffectNotify.AddPointName(builder, pointNameOffset);
    S2CPlayAmbientEffectNotify.AddEventId(builder, eventId);
    return S2CPlayAmbientEffectNotify.EndS2CPlayAmbientEffectNotify(builder);
  }

  public static void StartS2CPlayAmbientEffectNotify(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddEventId(FlatBufferBuilder builder, int eventId) { builder.AddInt(0, eventId, 0); }
  public static void AddPointName(FlatBufferBuilder builder, StringOffset pointNameOffset) { builder.AddOffset(1, pointNameOffset.Value, 0); }
  public static Offset<S2CPlayAmbientEffectNotify> EndS2CPlayAmbientEffectNotify(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2CPlayAmbientEffectNotify>(o);
  }
};


}
